// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProHair.NL.Data;

#nullable disable

namespace ProHair.NL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250904144342_Availability_Baseline")]
    partial class Availability_Baseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlackoutDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BlackoutDates");
                });

            modelBuilder.Entity("BusinessSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxSimultaneousBookings")
                        .HasColumnType("integer");

                    b.Property<int>("MinNoticeHours")
                        .HasColumnType("integer");

                    b.Property<int>("SlotMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BusinessSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxSimultaneousBookings = 1,
                            MinNoticeHours = 2,
                            SlotMinutes = 30,
                            TimeZone = "Europe/Brussels"
                        });
                });

            modelBuilder.Entity("ProHair.NL.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientEmail")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("ClientPhone")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HoldToken")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("HoldUntilUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StylistId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StylistId", "StartUtc")
                        .IsUnique()
                        .HasFilter("\"Status\" IN (0,1)");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ProHair.NL.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ProHair.NL.Models.Stylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Stylists");
                });

            modelBuilder.Entity("ProHair.NL.Models.TimeOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndLocal")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("StartLocal")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StylistId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StylistId");

                    b.ToTable("TimeOffs");
                });

            modelBuilder.Entity("ProHair.NL.Models.WorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EndLocal")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartLocal")
                        .HasColumnType("interval");

                    b.Property<int>("StylistId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StylistId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("WeeklyOpenHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly?>("Close")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly?>("Open")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("WeeklyOpenHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Close = new TimeOnly(19, 0, 0),
                            Day = 0,
                            IsClosed = true,
                            Open = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Close = new TimeOnly(19, 0, 0),
                            Day = 1,
                            IsClosed = false,
                            Open = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Close = new TimeOnly(19, 0, 0),
                            Day = 2,
                            IsClosed = false,
                            Open = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Close = new TimeOnly(19, 0, 0),
                            Day = 3,
                            IsClosed = false,
                            Open = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Close = new TimeOnly(19, 0, 0),
                            Day = 4,
                            IsClosed = false,
                            Open = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            Close = new TimeOnly(19, 0, 0),
                            Day = 5,
                            IsClosed = false,
                            Open = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            Close = new TimeOnly(19, 0, 0),
                            Day = 6,
                            IsClosed = false,
                            Open = new TimeOnly(10, 0, 0)
                        });
                });

            modelBuilder.Entity("ProHair.NL.Models.Appointment", b =>
                {
                    b.HasOne("ProHair.NL.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProHair.NL.Models.Stylist", "Stylist")
                        .WithMany()
                        .HasForeignKey("StylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Stylist");
                });

            modelBuilder.Entity("ProHair.NL.Models.TimeOff", b =>
                {
                    b.HasOne("ProHair.NL.Models.Stylist", "Stylist")
                        .WithMany("TimeOffs")
                        .HasForeignKey("StylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stylist");
                });

            modelBuilder.Entity("ProHair.NL.Models.WorkingHour", b =>
                {
                    b.HasOne("ProHair.NL.Models.Stylist", "Stylist")
                        .WithMany("WorkingHours")
                        .HasForeignKey("StylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stylist");
                });

            modelBuilder.Entity("ProHair.NL.Models.Stylist", b =>
                {
                    b.Navigation("TimeOffs");

                    b.Navigation("WorkingHours");
                });
#pragma warning restore 612, 618
        }
    }
}
