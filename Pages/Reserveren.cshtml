@page "/Reserveren"
@model ProHair.NL.Pages.ReserverenModel
@{
    Layout = "/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = "Reserveren";
}

<style>
/* (kısaltılmadı) — seninkinin aynısı */
</style>

<div class="resv-wrap">
    <section class="resv-hero">
        <h1>Reserveren</h1>
        <p>Kies een datum en behandeling. Tijdsloten worden realtime bijgewerkt.</p>
    </section>

    <section class="resv-card">
        <div class="resv-filters">
            <div class="resv-field">
                <label>Datum</label>
                <input id="date" type="text" class="resv-input" />
            </div>
            <div class="resv-field">
                <label>Behandeling</label>
                <select id="service" class="resv-select"></select>
            </div>
        </div>

        <div class="resv-toolbar">
            <button id="load" class="resv-btn">Toon beschikbare tijden</button>
            <span id="meta" style="opacity:.75;font-size:14px;"></span>
        </div>

        <div id="slots" class="resv-slots"></div>
    </section>
</div>

<!-- Drawer / Modal (seninki aynen) -->
<div id="drawer" class="resv-drawer"> ... </div>
<div id="modal" class="resv-modal-backdrop"> ... </div>
<div id="toasts" class="resv-toasts"></div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
const byId = (id) => document.getElementById(id);
const tz = "Europe/Brussels";
const API = {
  config: '/api/availability/config',
  availability: '/api/availability',
  hold: '/api/appointments/hold',
  confirm: '/api/appointments/confirm',
  release: '/api/appointments/release'
};

let cfg=null, connection=null, defaultStylistId=null;
let current={ date:null, serviceId:null, stylistId:null };
let hold={ token:null, expiresAtUtc:null, startLocal:null };
let activeIso=null, loadingSlotsCtrl=null, isLoadingSlots=false;

const yyyyMmDd = (d)=> new Date(d).toISOString().slice(0,10);

function toast(t,type="ok"){ const b=byId('toasts'); const el=document.createElement('div'); el.className=`resv-toast ${type}`; el.textContent=t; b.appendChild(el); setTimeout(()=>el.remove(),3500); }
function showModal(title,body){ byId('modalTitle').textContent=title; byId('modalBody').textContent=body; byId('modal').classList.add('open'); }
byId('modalClose').addEventListener('click',()=>byId('modal').classList.remove('open'));

function setLoadingSlots(n=12){ const slots=byId('slots'); slots.innerHTML=""; for(let i=0;i<n;i++){ const s=document.createElement('div'); s.className='resv-skeleton'; slots.appendChild(s);} byId('meta').textContent='Laden…'; }
function styleActive(btn,on){ if(on){ btn.style.background='linear-gradient(180deg,#FFE6A8,#E4C66B)'; btn.style.color='#111'; btn.style.borderColor='rgba(0,0,0,.15)'; btn.style.boxShadow='0 8px 18px rgba(0,0,0,.18)'; } else { btn.style.background='rgba(255,255,255,.18)'; btn.style.color='#111'; btn.style.borderColor='rgba(255,255,255,.28)'; btn.style.boxShadow='0 6px 16px rgba(0,0,0,.15)'; } }
function renderSlots(list){
  const el=byId('slots'); el.innerHTML='';
  if(!list?.length){ el.innerHTML='<div class="resv-empty">Geen tijden beschikbaar voor deze selectie.</div>'; byId('meta').textContent=''; return; }
  list.forEach(iso=>{
    const t=new Date(iso); const label=t.toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'});
    const b=document.createElement('button'); b.className='resv-slot'; b.textContent=label; b.dataset.iso=iso; styleActive(b, iso===activeIso); b.onclick=()=>holdSlot(iso); el.appendChild(b);
  });
  byId('meta').textContent=`${list.length} tijdsloten gevonden`;
}

async function findNextAvailable(date, serviceId, stylistId, days=21){
  let d=new Date(date);
  for(let i=1;i<=days;i++){
    d.setDate(d.getDate()+1); const ds=yyyyMmDd(d);
    try{ const r=await fetch(`${API.availability}?date=${ds}&stylistId=${stylistId}&serviceId=${serviceId}&tz=${encodeURIComponent(tz)}`, {cache:'no-store'}); if(!r.ok) continue; const slots=await r.json(); if(slots.length>0) return {date:ds, slots}; }catch{}
  } return null;
}

/* === flatpickr + kapalı gün & blackout === */
let fp=null;
async function refreshDisabledDates(y,m){
  try{
    const res=await fetch(`?handler=DisabledDates&year=${y}&month=${m}`, {cache:'no-store'});
    if(!res.ok) return;
    const conf=await res.json();
    fp.set('disable', [
      function(d){ return conf.closedDows.includes(d.getDay()); },
      ...conf.blackouts
    ]);
  }catch{}
}
async function setupDatePicker(){
  const today=new Date();
  fp = flatpickr("#date",{
    dateFormat:"Y-m-d",
    defaultDate: yyyyMmDd(today),
    minDate: yyyyMmDd(today),
    onMonthChange(_,__,inst){ refreshDisabledDates(inst.currentYear, inst.currentMonth+1); },
    onOpen(_,__,inst){ refreshDisabledDates(inst.currentYear, inst.currentMonth+1); },
    onChange(){ debouncedLoadSlots(); }
  });
  await refreshDisabledDates(today.getFullYear(), today.getMonth()+1);
}

async function loadConfig(){
  try{
    const res=await fetch(API.config, {cache:'no-store'});
    if(!res.ok) throw new Error(await res.text().catch(()=> 'Config laden mislukt.'));
    cfg=await res.json();
  }catch(e){ toast(e.message||'Config laden mislukt.','err'); return; }

  const sel=byId('service'); sel.innerHTML='';
  (cfg.services??[]).sort((a,b)=>a.name.localeCompare(b.name)).forEach(s=>{
    const mins=(Number(s.durationMinutes)||0)>0?` (${s.durationMinutes}m)`:''; sel.insertAdjacentHTML('beforeend', `<option value="${s.id}">${s.name}${mins}</option>`);
  });
  if(cfg.stylists?.length) defaultStylistId = cfg.stylists[0].id; else toast('Geen stylist in het systeem. Voeg er minstens één toe.','err');
  await setupDatePicker();
  sel.addEventListener('change', debouncedLoadSlots);
}

let loadTimer=null; function debouncedLoadSlots(){ clearTimeout(loadTimer); loadTimer=setTimeout(loadSlots,150); }

async function loadSlots(){
  if(!defaultStylistId) return;
  const date=byId('date').value; const serviceId=byId('service').value; const stylistId=defaultStylistId; current={date, serviceId, stylistId};
  if(!date) return;

  if(loadingSlotsCtrl) loadingSlotsCtrl.abort(); loadingSlotsCtrl=new AbortController();
  if(isLoadingSlots) return;
  isLoadingSlots=true; setLoadingSlots();
  try{
    const url=`${API.availability}?date=${date}&stylistId=${stylistId}&serviceId=${serviceId}&tz=${encodeURIComponent(tz)}`;
    const res=await fetch(url, {signal:loadingSlotsCtrl.signal, cache:'no-store'});
    if(!res.ok) throw new Error(await res.text().catch(()=> 'Kon tijden niet laden.'));
    let list=await res.json();
    if(date===yyyyMmDd(new Date())){ const now=new Date(); list=list.filter(iso=> new Date(iso)>now); }
    if(!list.length){
      const next=await findNextAvailable(date, serviceId, stylistId, 21);
      if(next){ byId('date').value=next.date; fp.setDate(next.date,true); toast(`Geen tijden voor gekozen datum. Volgende beschikbare: ${new Date(next.date).toLocaleDateString()} (${next.slots.length} slots).`); renderSlots(next.slots); isLoadingSlots=false; return; }
    }
    renderSlots(list);
  }catch(err){
    if(err?.name!=='AbortError'){ toast(err?.message||'Tijden laden mislukt.','err'); byId('meta').textContent=''; byId('slots').innerHTML='<div class="resv-empty">Laden mislukt.</div>'; }
  }finally{ isLoadingSlots=false; }
}

async function holdSlot(startLocalIso){
  if(hold.token){ try{ await fetch(API.release,{method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({HoldToken:hold.token})}); }catch{} }
  const payload={ StylistId:+current.stylistId, ServiceId:+current.serviceId, StartLocal:startLocalIso, Tz:tz };
  try{
    const res=await fetch(API.hold,{method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(payload), cache:'no-store'});
    if(!res.ok) throw new Error(await res.text().catch(()=> 'Hold aanmaken mislukt.'));
    const data=await res.json(); if(!data.ok){ toast(data.error||'Niet gelukt.','err'); return; }
    hold.token=data.holdToken; hold.expiresAtUtc=data.expiresAtUtc; hold.startLocal=startLocalIso; activeIso=startLocalIso; highlightActiveButton();
    byId('selectedInfo').textContent = `Gekozen: ${new Date(startLocalIso).toLocaleDateString()} • ${new Date(startLocalIso).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})}`;
    byId('drawer').classList.add('open'); document.body.classList.add('drawer-open'); startCountdown();
  }catch(err){ toast(err?.message||'Niet gelukt.','err'); }
}
function highlightActiveButton(){ document.querySelectorAll('#slots .resv-slot').forEach(b=> styleActive(b, b.dataset.iso===activeIso)); }

async function confirmBooking(){
  const name=byId('name').value.trim(); const email=byId('email').value.trim(); const phone=byId('phone').value.trim();
  if(!name||!email){ toast('Naam en e-mail zijn verplicht.','err'); return; }
  const btn=byId('confirm'); btn.disabled=true;
  try{
    const res=await fetch(API.confirm,{method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({HoldToken:hold.token, ClientName:name, ClientEmail:email, ClientPhone:phone}), cache:'no-store'});
    let data=null; try{ data=await res.json(); }catch{ data={ok:false,error:'Server gaf geen geldige response.'}; }
    if(!res.ok||!data.ok){ toast(data?.error||'Niet gelukt','err'); return; }
    showModal('Reservering bevestigd', `We zien je op ${new Date(hold.startLocal).toLocaleDateString()} om ${new Date(hold.startLocal).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})}. Een bevestiging is naar je e-mail verzonden.`);
    hold={ token:null, expiresAtUtc:null, startLocal:null }; activeIso=null; byId('drawer').classList.remove('open'); document.body.classList.remove('drawer-open'); await loadSlots();
  }catch(err){ toast(err?.message||'Bevestigen mislukt.','err'); }
  finally{ btn.disabled=false; }
}
async function cancelHold(){ if(hold.token){ try{ await fetch(API.release,{method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({HoldToken:hold.token})}); }catch{} } hold={ token:null, expiresAtUtc:null, startLocal:null }; activeIso=null; byId('drawer').classList.remove('open'); document.body.classList.remove('drawer-open'); highlightActiveButton(); }
function startCountdown(){ const el=byId('holdCountdown'); function tick(){ if(!hold.expiresAtUtc){ el.textContent=''; return;} const ms=new Date(hold.expiresAtUtc)-new Date(); if(ms<=0){ el.textContent='Hold verlopen.'; cancelHold(); loadSlots(); return;} const s=Math.max(0, Math.floor(ms/1000)); el.textContent=`• ${s}s gereserveerd`; requestAnimationFrame(tick);} tick(); }

function bindHub(){
  connection = new signalR.HubConnectionBuilder().withUrl('/hubs/booking').withAutomaticReconnect().build();
  connection.on('slotHeld',   m => { if (matchesCurrent(m)) loadSlots(); });
  connection.on('slotBooked', () => loadSlots());
  connection.on('slotReleased', () => loadSlots());
  // 🔔 Admin değişiklik yayını
  connection.on('calendarChanged', () => {
    const d = fp ? (fp.selectedDates[0] || new Date()) : new Date();
    refreshDisabledDates(d.getFullYear(), d.getMonth()+1);
    loadSlots();
  });
  connection.start().catch(()=> setTimeout(bindHub,1500));
}
function matchesCurrent(m){ return String(m?.stylistId)===String(current.stylistId) && String(m?.serviceId)===String(current.serviceId); }

byId('load').addEventListener('click', loadSlots);
byId('confirm').addEventListener('click', confirmBooking);
byId('cancelHold').addEventListener('click', cancelHold);
window.addEventListener('beforeunload', cancelHold);

// keep body class sync
const drawerEl=document.getElementById('drawer'); const sync=()=> document.body.classList.toggle('drawer-open', drawerEl.classList.contains('open')); new MutationObserver(sync).observe(drawerEl,{attributes:true, attributeFilter:['class']}); sync();

loadConfig().then(()=>{ bindHub(); loadSlots(); });
</script>
